"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Validator_1 = global[Symbol.for('ioc.use')]("Adonis/Core/Validator");
const Prisma_1 = global[Symbol.for('ioc.use')]("Adonis/Addons/Prisma");
const Logger_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Logger"));
class NotasController {
    async store({ request, response }) {
        try {
            const validationSchema = Validator_1.schema.create({
                notaExamen: Validator_1.schema.number(),
                notaTrabajos: Validator_1.schema.number(),
                notaParticipacion: Validator_1.schema.number(),
                notaAsistencia: Validator_1.schema.number(),
                notaOPI: Validator_1.schema.number(),
                estudianteId: Validator_1.schema.string(),
                libroId: Validator_1.schema.string(),
                filialId: Validator_1.schema.string(),
            });
            const payload = await request.validate({
                schema: validationSchema,
            });
            const existingNota = await Prisma_1.prisma.nota.findFirst({
                where: {
                    libroId: payload.libroId,
                },
            });
            if (existingNota) {
                return response.badRequest({ message: 'Ya existe una nota para este libro' });
            }
            const notaTrabajosWeight = 0.5;
            const notaParticipacionWeight = 0.1;
            const notaAsistenciaWeight = 0.1;
            const notaOPIWeight = 0.3;
            const promedio = (payload.notaTrabajos * notaTrabajosWeight +
                payload.notaParticipacion * notaParticipacionWeight +
                payload.notaAsistencia * notaAsistenciaWeight +
                payload.notaOPI * notaOPIWeight);
            const nuevaNota = await Prisma_1.prisma.nota.create({
                data: {
                    notaExamen: 0,
                    notaTrabajos: payload.notaTrabajos,
                    notaParticipacion: payload.notaParticipacion,
                    notaAsistencia: payload.notaAsistencia,
                    notaOPI: payload.notaOPI,
                    notaParcial: promedio,
                    notaRetest: 0,
                    promedioFinal: 0,
                    estudianteId: payload.estudianteId,
                    libroId: payload.libroId,
                    filialId: payload.filialId,
                },
            });
            Logger_1.default.info('Nueva nota creada con éxito', { notaId: nuevaNota.id });
            return response.status(201).json(nuevaNota);
        }
        catch (error) {
            Logger_1.default.error('Error al crear la nota', error);
            return response.badRequest({ message: 'Error al crear la nota' });
        }
    }
    async options({ request, response }) {
        try {
            const updateNotaSchema = Validator_1.schema.create({
                notaExamen: Validator_1.schema.number.optional(),
                notaParcial: Validator_1.schema.number.optional(),
                notaRetest: Validator_1.schema.number.optional(),
                notaId: Validator_1.schema.string(),
            });
            const { notaExamen, notaRetest, notaId } = await request.validate({
                schema: updateNotaSchema,
            });
            if (notaExamen < 0 || notaRetest < 0) {
                return response.badRequest({ message: 'La nota mínima debe ser 0' });
            }
            await Prisma_1.prisma.$transaction(async (prisma) => {
                const existingNota = await prisma.nota.findUnique({
                    where: { id: notaId },
                });
                if (!existingNota) {
                    return response.badRequest({ message: 'No se encontró una nota con este ID' });
                }
                const notaParcial = existingNota.notaParcial;
                let promedioFinal = (notaExamen * 0.9) + (notaParcial * 0.1);
                if (notaRetest > 75) {
                    promedioFinal = notaRetest;
                }
                const nuevaNota = await prisma.nota.update({
                    where: { id: notaId },
                    data: {
                        notaExamen: notaExamen,
                        notaRetest: notaRetest,
                        promedioFinal: promedioFinal,
                    },
                });
                Logger_1.default.info('Valores actualizados con éxito', { notaId: nuevaNota.id });
                return response.status(200).json({ message: 'Valores actualizados con éxito' });
            });
        }
        catch (error) {
            Logger_1.default.error('Error al actualizar los valores', error);
            return response.badRequest({ message: 'Error al actualizar los valores' });
        }
    }
    async showLibro({ params, response }) {
        try {
            const notas = await Prisma_1.prisma.nota.findMany({
                where: {
                    libroId: params.id,
                },
                include: {
                    estudiante: true,
                    libro: true,
                    filial: true,
                },
            });
            return response.status(200).json(notas);
        }
        catch (error) {
            Logger_1.default.error('Error al buscar notas por ID de libro', error);
            return response.badRequest({ message: 'Error al buscar notas por ID de libro' });
        }
    }
    async showFilialS({ params, response }) {
        try {
            const notas = await Prisma_1.prisma.nota.findMany({
                where: {
                    filialId: params.id,
                },
                include: {
                    estudiante: true,
                    libro: true,
                    filial: true,
                },
            });
            return response.status(200).json(notas);
        }
        catch (error) {
            Logger_1.default.error('Error al buscar notas por ID de filial T', error);
            return response.badRequest({ message: 'Error al buscar notas por ID de filial' });
        }
    }
    async showFilialBIEN({ params, response }) {
        try {
            const { libroId } = params;
            const notas = await Prisma_1.prisma.nota.findMany({
                where: { libroId },
            });
            if (notas.length === 0) {
                return response.notFound({ message: 'No se encontraron notas para este libroId' });
            }
            return response.status(200).json(notas);
        }
        catch (error) {
            Logger_1.default.error('Error al filtrar las notas por libroId', error);
            return response.badRequest({ message: 'Error al filtrar las notas por libroId' });
        }
    }
    async showFilial({ params, response }) {
        try {
            const estudianteId = params.estudianteId;
            const libroId = params.libroId;
            const notas = await Prisma_1.prisma.nota.findMany({
                where: {
                    estudianteId: estudianteId,
                    libroId: libroId
                },
            });
            if (notas.length === 0) {
                return response.status(404).json({ message: 'No se encontraron notas para este estudianteId' });
            }
            return response.status(200).json(notas);
        }
        catch (error) {
            Logger_1.default.error('Error al buscar notas por estudianteId', error);
            return response.badRequest({ message: 'Error al buscar notas por estudianteId' });
        }
    }
    async showEstu({ request, response }) {
        try {
            const { nombre, matricula } = request.qs();
            if (!nombre && !matricula) {
                return response.badRequest({ message: 'Debes proporcionar al menos el nombre o la matrícula del estudiante.' });
            }
            const notas = await Prisma_1.prisma.nota.findMany({
                where: {
                    OR: [
                        {
                            estudiante: {
                                nombre: nombre,
                            },
                        },
                        {
                            estudiante: {
                                matricula: matricula,
                            },
                        },
                    ],
                },
                include: {
                    estudiante: true,
                    libro: true,
                    filial: true,
                },
            });
            return response.status(200).json(notas);
        }
        catch (error) {
            Logger_1.default.error('Error al buscar notas por nombre o matrícula del estudiante', error);
            return response.badRequest({ message: 'Error al buscar notas por nombre o matrícula del estudiante' });
        }
    }
    async getNotas({ response }) {
        try {
            const notas = await Prisma_1.prisma.nota.findMany();
            const notasConNombres = await Promise.all(notas.map(async (nota) => {
                const estudiante = await Prisma_1.prisma.persona.findUnique({
                    where: { id: nota.estudianteId },
                });
                const libro = await Prisma_1.prisma.libro.findUnique({
                    where: { id: nota.libroId },
                });
                return {
                    ...nota,
                    nombreEstudiante: estudiante?.nombre,
                    ApellidosP: estudiante?.apellidoPaterno,
                    ApellidosM: estudiante?.apellidoMaterno,
                    nombreLibro: libro?.nombre,
                };
            }));
            return response.ok(notasConNombres);
        }
        catch (error) {
            Logger_1.default.error(error);
            return response.badRequest({ message: 'Error al obtener las notas' });
        }
    }
    async getNotasPorLibroID({ params, response }) {
        try {
            const libroId = params.libroId;
            const notas = await Prisma_1.prisma.nota.findMany({
                where: {
                    libroId: libroId,
                },
            });
            const notasConNombres = await Promise.all(notas.map(async (nota) => {
                const estudiante = await Prisma_1.prisma.persona.findUnique({
                    where: { id: nota.estudianteId },
                });
                const libro = await Prisma_1.prisma.libro.findUnique({
                    where: { id: nota.libroId },
                });
                return {
                    ...nota,
                    nombreEstudiante: estudiante?.nombre,
                    ApellidosP: estudiante?.apellidoPaterno,
                    ApellidosM: estudiante?.apellidoMaterno,
                    nombreLibro: libro?.nombre,
                };
            }));
            return response.ok(notasConNombres);
        }
        catch (error) {
            Logger_1.default.error(error);
            return response.badRequest({ message: 'Error al obtener las notas' });
        }
    }
    async getNotasP({ response }) {
        try {
            const notas = await Prisma_1.prisma.nota.findMany();
            const promediosEstudiantes = {};
            notas.forEach((nota) => {
                if (!promediosEstudiantes[nota.estudianteId]) {
                    promediosEstudiantes[nota.estudianteId] = [];
                }
                promediosEstudiantes[nota.estudianteId].push(nota.nota);
            });
            const promedios = Object.keys(promediosEstudiantes).map((estudianteId) => {
                const notasEstudiante = promediosEstudiantes[parseInt(estudianteId, 10)];
                const promedio = notasEstudiante.reduce((sum, nota) => sum + nota, 0) / notasEstudiante.length;
                return { estudianteId: parseInt(estudianteId, 10), promedio };
            });
            promedios.sort((a, b) => b.promedio - a.promedio);
            const mejoresPromedios = promedios.slice(0, 3);
            const estudiantesPromedios = await Promise.all(mejoresPromedios.map(async (promedioInfo) => {
                const estudiante = await Prisma_1.prisma.persona.findUnique({
                    where: { id: promedioInfo.estudianteId },
                });
                return {
                    nombreEstudiante: estudiante?.nombre,
                    ApellidosP: estudiante?.apellidoPaterno,
                    ApellidosM: estudiante?.apellidoMaterno,
                    promedio: promedioInfo.promedio,
                };
            }));
            return response.ok(estudiantesPromedios);
        }
        catch (error) {
            Logger_1.default.error(error);
            return response.badRequest({ message: 'Error al obtener las notas' });
        }
    }
    async getNotasPRODIO({ response }) {
        try {
            const notas = await Prisma_1.prisma.nota.findMany();
            const notasConNombres = await Promise.all(notas.map(async (nota) => {
                const estudiante = await Prisma_1.prisma.persona.findUnique({
                    where: { id: nota.estudianteId },
                });
                const libro = await Prisma_1.prisma.libro.findUnique({
                    where: { id: nota.libroId },
                });
                return {
                    ...nota,
                    nombreEstudiante: estudiante?.nombre,
                    ApellidosP: estudiante?.apellidoPaterno,
                    ApellidosM: estudiante?.apellidoMaterno,
                    nombreLibro: libro?.nombre,
                };
            }));
            notasConNombres.sort((a, b) => b.promedioFinal - a.promedioFinal);
            const tresPromediosAltos = notasConNombres.slice(0, 3);
            return response.ok(tresPromediosAltos);
        }
        catch (error) {
            Logger_1.default.error(error);
            return response.badRequest({ message: 'Error al obtener las notas' });
        }
    }
    async getNotasReprobadas({ response }) {
        try {
            const notas = await Prisma_1.prisma.nota.findMany();
            const notasReprobadas = await Promise.all(notas
                .filter(nota => nota.promedioFinal < 71)
                .map(async (nota) => {
                const estudiante = await Prisma_1.prisma.persona.findUnique({
                    where: { id: nota.estudianteId },
                });
                const libro = await Prisma_1.prisma.libro.findUnique({
                    where: { id: nota.libroId },
                });
                return {
                    ...nota,
                    nombreEstudiante: estudiante?.nombre,
                    ApellidosP: estudiante?.apellidoPaterno,
                    ApellidosM: estudiante?.apellidoMaterno,
                    nombreLibro: libro?.nombre,
                };
            }));
            return response.ok(notasReprobadas);
        }
        catch (error) {
            Logger_1.default.error(error);
            return response.badRequest({ message: 'Error al obtener las notas reprobadas' });
        }
    }
    async getCantidadReprobados({ response }) {
        try {
            const notas = await Prisma_1.prisma.nota.findMany();
            const cantidadAprobados = notas.filter(nota => nota.promedioFinal >= 71).length;
            const cantidadReprobados = notas.filter(nota => nota.promedioFinal < 71).length;
            return response.ok({ cantidadAprobados, cantidadReprobados });
        }
        catch (error) {
            Logger_1.default.error(error);
            return response.badRequest({ message: 'Error al obtener la cantidad de aprobados y reprobados' });
        }
    }
    async getCantidadReprobadosA({ response }) {
        try {
            const notas = await Prisma_1.prisma.nota.findMany();
            const cantidadReprobados = notas.filter(nota => nota.promedioFinal < 71).length;
            return response.ok({ cantidadReprobados });
        }
        catch (error) {
            Logger_1.default.error(error);
            return response.badRequest({ message: 'Error al obtener la cantidad de reprobados' });
        }
    }
    async getPromediosParaGrafico({ response }) {
        try {
            const notas = await Prisma_1.prisma.nota.findMany();
            const promedios = notas.map(nota => nota.promedioFinal);
            return response.ok({ promedios });
        }
        catch (error) {
            Logger_1.default.error(error);
            return response.badRequest({ message: 'Error al obtener los promedios para el gráfico' });
        }
    }
    async firmas({ response }) {
        const firmas = await Prisma_1.prisma.firma.findMany();
        return response.status(200).json(firmas);
    }
}
exports.default = NotasController;
//# sourceMappingURL=data:application/json;base64,